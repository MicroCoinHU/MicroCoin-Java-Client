/**
 * MicroCoin
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package Api;

import hu.microcoin.ApiInvoker;
import hu.microcoin.ApiException;
import hu.microcoin.Pair;

import Model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import Model.Account;
import Model.ChangeKey;
import Model.ChangeKeyRequest;
import Model.MicroCoinError;
import Model.PurchaseAccount;
import Model.PurchaseAccountRequest;
import Model.SimpleKey;
import Model.Transaction;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class AccountApi {
  String basePath = "http://rider.microcoin.hu";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Commit change key transaction
  * With the change key transaction you can transfer your account to a new owner. To send a new changekey transaction you need to create a transaction using the StartChangeKey method,  then sign it with your private key. You can send your transaction using this method.
   * @param changeKey The signed transaction
   * @return ChangeKey
  */
  public ChangeKey commitChangeKey (ChangeKeyRequest changeKey) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = changeKey;
    // verify the required parameter 'changeKey' is set
    if (changeKey == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'changeKey' when calling commitChangeKey",
        new ApiException(400, "Missing the required parameter 'changeKey' when calling commitChangeKey"));
    }

    // create path and map variables
    String path = "/api/Account/change-key/commit";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ChangeKey) ApiInvoker.deserialize(localVarResponse, "", ChangeKey.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Commit change key transaction
   * With the change key transaction you can transfer your account to a new owner. To send a new changekey transaction you need to create a transaction using the StartChangeKey method,  then sign it with your private key. You can send your transaction using this method.
   * @param changeKey The signed transaction
  */
  public void commitChangeKey (ChangeKeyRequest changeKey, final Response.Listener<ChangeKey> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = changeKey;

    // verify the required parameter 'changeKey' is set
    if (changeKey == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'changeKey' when calling commitChangeKey",
        new ApiException(400, "Missing the required parameter 'changeKey' when calling commitChangeKey"));
    }

    // create path and map variables
    String path = "/api/Account/change-key/commit".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ChangeKey) ApiInvoker.deserialize(localVarResponse,  "", ChangeKey.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Commit signed Purchase account transaction
  * If you created and signed your \&quot;Purchase account\&quot; transaction you need to send it into the network. Call this method to send and commit your signed \&quot;Purchase account\&quot; transaction.
   * @param data Signed transaction
   * @return PurchaseAccount
  */
  public PurchaseAccount commitPurchaseAccount (PurchaseAccountRequest data) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = data;
    // verify the required parameter 'data' is set
    if (data == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'data' when calling commitPurchaseAccount",
        new ApiException(400, "Missing the required parameter 'data' when calling commitPurchaseAccount"));
    }

    // create path and map variables
    String path = "/api/Account/purchase/commit";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (PurchaseAccount) ApiInvoker.deserialize(localVarResponse, "", PurchaseAccount.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Commit signed Purchase account transaction
   * If you created and signed your \&quot;Purchase account\&quot; transaction you need to send it into the network. Call this method to send and commit your signed \&quot;Purchase account\&quot; transaction.
   * @param data Signed transaction
  */
  public void commitPurchaseAccount (PurchaseAccountRequest data, final Response.Listener<PurchaseAccount> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = data;

    // verify the required parameter 'data' is set
    if (data == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'data' when calling commitPurchaseAccount",
        new ApiException(400, "Missing the required parameter 'data' when calling commitPurchaseAccount"));
    }

    // create path and map variables
    String path = "/api/Account/purchase/commit".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((PurchaseAccount) ApiInvoker.deserialize(localVarResponse,  "", PurchaseAccount.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Account detils
  * You can retrieve details (balance, name, type, etc.) of any account, if you know the account number.
   * @param accountNumber Account number, example: 1-22, or 1
   * @return Account
  */
  public Account getAccount (String accountNumber) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'accountNumber' is set
    if (accountNumber == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountNumber' when calling getAccount",
        new ApiException(400, "Missing the required parameter 'accountNumber' when calling getAccount"));
    }

    // create path and map variables
    String path = "/api/Account/{AccountNumber}".replaceAll("\\{" + "AccountNumber" + "\\}", apiInvoker.escapeString(accountNumber.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Account) ApiInvoker.deserialize(localVarResponse, "", Account.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Account detils
   * You can retrieve details (balance, name, type, etc.) of any account, if you know the account number.
   * @param accountNumber Account number, example: 1-22, or 1
  */
  public void getAccount (String accountNumber, final Response.Listener<Account> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'accountNumber' is set
    if (accountNumber == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountNumber' when calling getAccount",
        new ApiException(400, "Missing the required parameter 'accountNumber' when calling getAccount"));
    }

    // create path and map variables
    String path = "/api/Account/{AccountNumber}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "AccountNumber" + "\\}", apiInvoker.escapeString(accountNumber.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Account) ApiInvoker.deserialize(localVarResponse,  "", Account.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get list of accounts for sale
  * This is the list of accounts for sale.  You can purchase accounts if you have enough MicroCoin in your founder account. The account price will be deducted from the founder account balance. You must sign the transaction with the founder account private key.
   * @return List<Account>
  */
  public List<Account> getOffers () throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/api/Account/offers";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<Account>) ApiInvoker.deserialize(localVarResponse, "array", Account.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get list of accounts for sale
   * This is the list of accounts for sale.  You can purchase accounts if you have enough MicroCoin in your founder account. The account price will be deducted from the founder account balance. You must sign the transaction with the founder account private key.

  */
  public void getOffers (final Response.Listener<List<Account>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/api/Account/offers".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<Account>) ApiInvoker.deserialize(localVarResponse,  "array", Account.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve account transaction history
  * 
   * @param accountNumber Account number to 
   * @param start Start from
   * @param max Maximum lines to receive
   * @return List<Transaction>
  */
  public List<Transaction> getTransactions (String accountNumber, Integer start, Integer max) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'accountNumber' is set
    if (accountNumber == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountNumber' when calling getTransactions",
        new ApiException(400, "Missing the required parameter 'accountNumber' when calling getTransactions"));
    }

    // create path and map variables
    String path = "/api/Account/{AccountNumber}/history".replaceAll("\\{" + "AccountNumber" + "\\}", apiInvoker.escapeString(accountNumber.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start", start));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "max", max));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<Transaction>) ApiInvoker.deserialize(localVarResponse, "array", Transaction.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve account transaction history
   * 
   * @param accountNumber Account number to    * @param start Start from   * @param max Maximum lines to receive
  */
  public void getTransactions (String accountNumber, Integer start, Integer max, final Response.Listener<List<Transaction>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'accountNumber' is set
    if (accountNumber == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountNumber' when calling getTransactions",
        new ApiException(400, "Missing the required parameter 'accountNumber' when calling getTransactions"));
    }

    // create path and map variables
    String path = "/api/Account/{AccountNumber}/history".replaceAll("\\{format\\}","json").replaceAll("\\{" + "AccountNumber" + "\\}", apiInvoker.escapeString(accountNumber.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "start", start));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "max", max));


    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<Transaction>) ApiInvoker.deserialize(localVarResponse,  "array", Transaction.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get a list of accounts belonging to the key
  * Every account belongs to a public key. If you know the public key you can retrieve the list of accounts belonging to the key.
   * @param key The public key
   * @return List<Account>
  */
  public List<Account> myAccounts (SimpleKey key) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = key;
    // verify the required parameter 'key' is set
    if (key == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'key' when calling myAccounts",
        new ApiException(400, "Missing the required parameter 'key' when calling myAccounts"));
    }

    // create path and map variables
    String path = "/api/Account/list";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<Account>) ApiInvoker.deserialize(localVarResponse, "array", Account.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get a list of accounts belonging to the key
   * Every account belongs to a public key. If you know the public key you can retrieve the list of accounts belonging to the key.
   * @param key The public key
  */
  public void myAccounts (SimpleKey key, final Response.Listener<List<Account>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = key;

    // verify the required parameter 'key' is set
    if (key == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'key' when calling myAccounts",
        new ApiException(400, "Missing the required parameter 'key' when calling myAccounts"));
    }

    // create path and map variables
    String path = "/api/Account/list".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<Account>) ApiInvoker.deserialize(localVarResponse,  "array", Account.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Create new change key transaction
  * With the change key transaction you can transfer your account to a new owner. To send a new changekey transaction you need to create a transaction using this this method,  then sign it with your private key. You can send your transaction using the CommitChangeKey method.
   * @param changeKey Initial transaction data
   * @return ChangeKeyRequest
  */
  public ChangeKeyRequest startChangeKey (ChangeKeyRequest changeKey) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = changeKey;
    // verify the required parameter 'changeKey' is set
    if (changeKey == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'changeKey' when calling startChangeKey",
        new ApiException(400, "Missing the required parameter 'changeKey' when calling startChangeKey"));
    }

    // create path and map variables
    String path = "/api/Account/change-key/start";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ChangeKeyRequest) ApiInvoker.deserialize(localVarResponse, "", ChangeKeyRequest.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create new change key transaction
   * With the change key transaction you can transfer your account to a new owner. To send a new changekey transaction you need to create a transaction using this this method,  then sign it with your private key. You can send your transaction using the CommitChangeKey method.
   * @param changeKey Initial transaction data
  */
  public void startChangeKey (ChangeKeyRequest changeKey, final Response.Listener<ChangeKeyRequest> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = changeKey;

    // verify the required parameter 'changeKey' is set
    if (changeKey == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'changeKey' when calling startChangeKey",
        new ApiException(400, "Missing the required parameter 'changeKey' when calling startChangeKey"));
    }

    // create path and map variables
    String path = "/api/Account/change-key/start".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ChangeKeyRequest) ApiInvoker.deserialize(localVarResponse,  "", ChangeKeyRequest.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Create purchase account transaction
  * If you want to purchase an account you need to create a new transaction, sign it then send it into the newtwork. This method creates a new transaction and a hash for you. You need to sign the hash then commit your transaction with the CommitPurchaseAccount method
   * @param data Transaction data
   * @return PurchaseAccountRequest
  */
  public PurchaseAccountRequest startPurchaseAccount (PurchaseAccountRequest data) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = data;
    // verify the required parameter 'data' is set
    if (data == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'data' when calling startPurchaseAccount",
        new ApiException(400, "Missing the required parameter 'data' when calling startPurchaseAccount"));
    }

    // create path and map variables
    String path = "/api/Account/purchase/start";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (PurchaseAccountRequest) ApiInvoker.deserialize(localVarResponse, "", PurchaseAccountRequest.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create purchase account transaction
   * If you want to purchase an account you need to create a new transaction, sign it then send it into the newtwork. This method creates a new transaction and a hash for you. You need to sign the hash then commit your transaction with the CommitPurchaseAccount method
   * @param data Transaction data
  */
  public void startPurchaseAccount (PurchaseAccountRequest data, final Response.Listener<PurchaseAccountRequest> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = data;

    // verify the required parameter 'data' is set
    if (data == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'data' when calling startPurchaseAccount",
        new ApiException(400, "Missing the required parameter 'data' when calling startPurchaseAccount"));
    }

    // create path and map variables
    String path = "/api/Account/purchase/start".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((PurchaseAccountRequest) ApiInvoker.deserialize(localVarResponse,  "", PurchaseAccountRequest.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}

/**
 * MicroCoin
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package Api;

import hu.microcoin.ApiInvoker;
import hu.microcoin.ApiException;
import hu.microcoin.Pair;

import Model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import Model.MicroCoinError;
import Model.Transaction;
import Model.TransactionRequest;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class TransactionApi {
  String basePath = "http://rider.microcoin.hu";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Commit a signed transaction
  * After you created and signed your transaction, you need to commit it.
   * @param data The signed transaction
   * @return Transaction
  */
  public Transaction commitTransaction (TransactionRequest data) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = data;
    // verify the required parameter 'data' is set
    if (data == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'data' when calling commitTransaction",
        new ApiException(400, "Missing the required parameter 'data' when calling commitTransaction"));
    }

    // create path and map variables
    String path = "/api/Transaction/commit";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Transaction) ApiInvoker.deserialize(localVarResponse, "", Transaction.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Commit a signed transaction
   * After you created and signed your transaction, you need to commit it.
   * @param data The signed transaction
  */
  public void commitTransaction (TransactionRequest data, final Response.Listener<Transaction> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = data;

    // verify the required parameter 'data' is set
    if (data == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'data' when calling commitTransaction",
        new ApiException(400, "Missing the required parameter 'data' when calling commitTransaction"));
    }

    // create path and map variables
    String path = "/api/Transaction/commit".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Transaction) ApiInvoker.deserialize(localVarResponse,  "", Transaction.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve single transaction by hash
  * If you know the transaction hash (ophash), you can retreive the transaction details
   * @param ophash Transaction hash
   * @return Transaction
  */
  public Transaction getTransaction (String ophash) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'ophash' is set
    if (ophash == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'ophash' when calling getTransaction",
        new ApiException(400, "Missing the required parameter 'ophash' when calling getTransaction"));
    }

    // create path and map variables
    String path = "/api/Transaction/{ophash}".replaceAll("\\{" + "ophash" + "\\}", apiInvoker.escapeString(ophash.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Transaction) ApiInvoker.deserialize(localVarResponse, "", Transaction.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve single transaction by hash
   * If you know the transaction hash (ophash), you can retreive the transaction details
   * @param ophash Transaction hash
  */
  public void getTransaction (String ophash, final Response.Listener<Transaction> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'ophash' is set
    if (ophash == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'ophash' when calling getTransaction",
        new ApiException(400, "Missing the required parameter 'ophash' when calling getTransaction"));
    }

    // create path and map variables
    String path = "/api/Transaction/{ophash}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "ophash" + "\\}", apiInvoker.escapeString(ophash.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Transaction) ApiInvoker.deserialize(localVarResponse,  "", Transaction.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Create transaction for sign
  * To send coins you need to create and send transactions. Using this method you can validate your transaction and you will get a transaction hash. This is the hash what you need to sign using your private key, then you can commit your transaction with your valid signature
   * @param data Basic transaction data
   * @return TransactionRequest
  */
  public TransactionRequest startTransaction (TransactionRequest data) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = data;
    // verify the required parameter 'data' is set
    if (data == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'data' when calling startTransaction",
        new ApiException(400, "Missing the required parameter 'data' when calling startTransaction"));
    }

    // create path and map variables
    String path = "/api/Transaction/start";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (TransactionRequest) ApiInvoker.deserialize(localVarResponse, "", TransactionRequest.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create transaction for sign
   * To send coins you need to create and send transactions. Using this method you can validate your transaction and you will get a transaction hash. This is the hash what you need to sign using your private key, then you can commit your transaction with your valid signature
   * @param data Basic transaction data
  */
  public void startTransaction (TransactionRequest data, final Response.Listener<TransactionRequest> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = data;

    // verify the required parameter 'data' is set
    if (data == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'data' when calling startTransaction",
        new ApiException(400, "Missing the required parameter 'data' when calling startTransaction"));
    }

    // create path and map variables
    String path = "/api/Transaction/start".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((TransactionRequest) ApiInvoker.deserialize(localVarResponse,  "", TransactionRequest.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
